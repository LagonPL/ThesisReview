1.
public IActionResult Create(FormViewModel fVM)
    {
      /wczytanie danych z FormViewModel do Form
        Form form = new Form
        {
          Title = fVM.Title,
          ReviewType = fVM.ReviewType,
          ShortDescription = fVM.ShortDescription,
          StudentMail = fVM.StudentMail,
          Status = "Nowa",
          ReviewerName = fVM.ReviewerName,
          GuardianName = fVM.GuardianName,
          Department = fVM.Department,
          StudentName = fVM.StudentName
        };
      if (ModelState.IsValid)
      {
        if (!EmailExist(fVM.ReviewerName, fVM.GuardianName, fVM.ReviewType))
        {
		//Wysłanie danych do FormViewModel w przypadku błędu walidacji
          fVM.NoError = false;
          fVM.ReviewTypeList = new SelectList(StringGenerator.ReviewTypesFiller());
          fVM.DepartmentList = new SelectList(StringGenerator.DepartmentFiller());
          fVM.ErrorMessage = "Brakuje maili w bazie lub mail opiekuna i recenzenta jest taki sam";
		  //Wysłanie ich bezpośrednio do widoku tworzenia formularza
          return View(fVM);
        }
	[.]
2.
@model ReportViewModel
@{
	ViewData["Title"] = "Raporty";
}
<table class="table table-bordered table-striped">
	<thead>
		<tr>
			<th>Opiekun</th>
			<th>Ocena</th>
			<th>Recenzent</th>
			<th>Ocena</th>
			<th>Student</th>
			<th>Data Zakończenia</th>
		</tr>
	</thead>
	<tbody>
	//Pętla foreach korzystająca z dobrodziejstw silnika Razor. Uwage należy zwórić na @.
		@foreach (var line in Model.Reports)
		{
		<tr>
			<td>@line.Guardian</td>
			<td>@line.GradeGuardian</td>
			<td>@line.Reviewer</td>
			<td>@line.GradeReviewer</td>
			<td>@line.Student</td>
			<td>@line.Date</td>
		</tr>
		}
	</tbody>
</table>
3.
[Authorize(Roles = "Admin")]
public IActionResult Report(string datestart, string datefinish)
{
//Aplikacja tworzy ViewModel z raportami pracowniczymi 
  ReportViewModel rVM = new ReportViewModel
  {
	Reports = _adminRepository.GetReports(Convert.ToDateTime(datestart), Convert.ToDateTime(datefinish))
  };
  //Aplikacja wysyła ReportViewModel z raportami pracowniczymi do odpowiadającym im strony
  return View(rVM);
}
4.
public class AppDbContext : IdentityDbContext<ApplicationUser>
{

    public AppDbContext(DbContextOptions<AppDbContext> options) :base(options)
    {

    }

    public DbSet<Form> Forms { get; set; }
    public DbSet<Questions> Questions { get; set; }
    public DbSet<UserList> UserLists { get; set; }
    public DbSet<Report> Reports { get; set; }
    public DbSet<RequestForm> RequestForms { get; set; }
}

5.
public void ConfigureServices(IServiceCollection services)
{
//1
	services.AddDbContext<AppDbContext>(options =>
		options.UseSqlServer(_configurationRoot.GetConnectionString("DefaultConnection")));
}
5.1
public void DeleteUser(string userId)
    {
	//Czytanie usera z bazy
      var deleteduser = _appDbContext.Users.FirstOrDefault(p => p.Email == userId);
      var userlist = _appDbContext.UserLists.FirstOrDefault(p => p.Mail == userId);
	  //usuwanie go z listy pracowników
      _appDbContext.UserLists.Remove(userlist);
	  //Deaktywacja jego konta
      deleteduser.IsActive = false;
	  //Zapisanie powiązanych z bazą rekordów z pomocą AppDbContext
      _appDbContext.SaveChanges();
    }
	
	
5.2.
	services.AddIdentity<ApplicationUser, IdentityRole>()
		.AddEntityFrameworkStores<AppDbContext>()
		.AddDefaultTokenProviders();


6.
public async Task<IActionResult> Login(LogInViewModel logInViewModel)
    {
      if (!ModelState.IsValid)
        return View(logInViewModel);
	//wyszukanie użytkownika na podstawie maila
      var user = await _userManager.FindByEmailAsync(logInViewModel.Email);
      if (user != null && user.IsActive)
      {
	  //sprawdzenie poprawności hasła oraz wpisanie użytkownika do przeglądarki w ramach ciasteczek cookies
        var result = await _signInManager.PasswordSignInAsync(user, logInViewModel.Password, false, false);
        if (result.Succeeded)
        {
          if (string.IsNullOrEmpty(logInViewModel.ReturnUrl))
            return RedirectToAction("Index", "Home");
          return Redirect(logInViewModel.ReturnUrl);
        }
      }
      ModelState.AddModelError("wrongform", "Nieprawidłowy email lub hasło");
      return View(logInViewModel);
    }
	
7.
public class Program
  {
    public static void Main(string[] args)
    {
      CreateWebHostBuilder(args).Build().Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
            .UseStartup<Startup>().UseSetting("detailedErrors", "true")
                .CaptureStartupErrors(true);
  }
  
8.
services.AddDbContext<AppDbContext>(options =>
        options.UseSqlServer(_configurationRoot.GetConnectionString("DefaultConnection")));
		
9.
public static void Send(string receiver, string subject, string content)
    {
      var message = new MimeMessage();
	  //Adres mailowy nadawcy wraz z jego nazwą
      message.From.Add(new MailboxAddress("Recenzje Prac", MailName));
	  //Adres odbiorcy
      message.To.Add(new MailboxAddress(receiver, receiver));
	  //Temat maila
      message.Subject = subject;
	  //Treści wiadomości
      message.Body = new TextPart("plain")
      {
        Text = content
      };
	//Lączenie z klientem Smtp oraz wysyłka maila
      using (var client = new SmtpClient())
      {
        client.ServerCertificateValidationCallback = (s, c, h, e) => true;
        client.Connect(MailSMTP, Int32.Parse(MailPort) , false);
        client.Authenticate(MailName, MailPassword);
        client.Send(message);
        client.Disconnect(true);
      }
    }